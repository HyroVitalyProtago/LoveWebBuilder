/*
  LÃ–VE Web Builder
  Copyright (C) 2018 Bernhard Schelling

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
*/

// Examples from the LOVE-Example-Browser repository:
// https://github.com/love2d-community/LOVE-Example-Browser/

(function() {

var $ = function(i) { return document.getElementById(i); };
var code = $('code'), example = $('example');
var GetExample = function(i)
{
	return [
		{ name: 'Loading an Image and displaying it (001_loading_image.lua)',      src: '--[[Description:\nLoad an image using love.graphics.newImage(image_path)\nDraw it using love.graphics.draw\n]]\n\nfunction love.load()\n	image = love.graphics.newImage("love.png")\nend\n\nfunction love.draw()\n	love.graphics.draw(image, 400, 300)\nend' },
		{ name: 'Getting the mouse position (002_mouse_getpos.lua)',               src: '--[[Description:\nGet the mouse position with love.mouse.getPosition()\nDisplay it with love.graphics.print\n]]\n\nfunction love.load()\n	love.graphics.setFont(love.graphics.newFont(11))\nend\n\nfunction love.draw()\n	-- Gets the x- and y-position of the mouse.\n	local x, y = love.mouse.getPosition()\n	-- Draws the position on screen.\n	love.graphics.print("The mouse is at (" .. x .. "," .. y .. ")", 50, 50)\nend' },
		{ name: 'Checking for pressed mouse buttons (005_mouse_button.lua)',       src: 'function love.load()\n   love.graphics.setFont(love.graphics.newFont(11))\nend\n\nfunction love.draw()\n	-- Left mouse button.\n	if love.mouse.isDown(1) then\n		love.graphics.print("Left mouse button is down", 50, 50)\n	end\n\n	-- Right mouse button.\n	if love.mouse.isDown(2) then\n		love.graphics.print("Right mouse button is down", 50, 100)\n	end\n\n	-- Middle mouse button.\n	if love.mouse.isDown(3) then\n		love.graphics.print("Middle mouse button is down", 50, 75)\n	end\nend' },
		{ name: 'Cursor Visibility (006_cursor_visibility.lua)',                   src: 'function love.load()\n	-- Hide mouse on startup.\n	love.mouse.setVisible(false)\n	love.graphics.setFont(love.graphics.newFont(11))\nend\n\n-- Toggle cursor visibility.\nfunction love.keypressed(k)\n	if k == "v" then\n	if love.mouse.isVisible() then\n		love.mouse.setVisible(false)\n	else\n		love.mouse.setVisible(true)\n	end\n	end\nend\n\nfunction love.draw()\n	love.graphics.print("Press V to toggle visibility.", 50, 50)\nend' },
		{ name: 'FPS and delta-time (008_fps_delta.lua)',                          src: 'function love.load()\n	love.graphics.setFont(love.graphics.newFont(11))\nend\n\nfunction love.draw()\n	-- Draw the current FPS.\n	love.graphics.print("FPS: " .. love.timer.getFPS(), 50, 50)\n	-- Draw the current delta-time. (The same value\n	-- is passed to update each frame).\n	love.graphics.print("dt: " .. love.timer.getDelta(), 50, 100)\nend' },
		{ name: 'Timing code (009_timing.lua)',                                    src: 'function love.load()\n	-- Get time before the code to be timed.\n	t_start = love.timer.getTime()\n\n	-- Load 10 fonts.\n	for i=13,22 do\n		local f = love.graphics.newFont(i)\n		love.graphics.setFont(f)\n	end\n\n	-- Get time after.\n	t_end = love.timer.getTime()\n\nend\n\nfunction love.draw()\n	love.graphics.print("Spent " .. (t_end-t_start) .. " seconds loading 10 fonts.", 50, 50)\nend' },
		{ name: 'Checking if a key is down (010_key_down.lua)',                    src: 'function love.load()\n	love.graphics.setFont(love.graphics.newFont(11))\nend\n\nfunction love.draw()\n	-- Checks whether the return key is down or not.\n	if love.keyboard.isDown("return") then\n		love.graphics.print("The return key is down.", 50, 50)\n	else\n		love.graphics.print("The return key isn\'t down.", 50, 50)\n	end\nend' },
		{ name: 'Create and use an Animation (011_animation.lua)',                 src: 'function love.load()\n	-- Set a lovely pink background color.\n	love.graphics.setBackgroundColor(246/255, 198/255, 222/255)\n\n	-- Load the source of the animation.\n	img = love.graphics.newImage("anim.png")\n\n	-- Create an animation with a frame size of 32x32 and 0.1s delay betwen each frame.\n	local imgw, imgh, fw, fh = img:getWidth(), img:getHeight(), 32, 32\n	local ncols = imgw/fw\n	delay, frames, start = 0.1, {}, love.timer.getTime()\n	for i = 1, 6 do\n		local x, y = fw * ((i - 1) % ncols), fh * math.floor((i - 1) / ncols)\n		table.insert(frames, love.graphics.newQuad(x, y, fw, fh, imgw, imgh))\n	end\nend\n\nfunction love.draw()\n	-- Select the frame based on elapsed time and the delay.\n	local elapsed = love.timer.getTime() - start\n	local frame = 1 + math.floor((elapsed / delay) % #frames)\n\n	-- Draw the animation the center of the screen.\n	love.graphics.draw(img, frames[frame], 400, 300)\nend' },
		{ name: 'Move an image along cursor (013_cursor_image.lua)',               src: 'function love.load()\n	-- Load the "cursor"\n	image = love.graphics.newImage("love.png")\n\n	-- Hide the default mouse.\n	love.mouse.setVisible(false)\nend\n\nfunction love.draw()\n	-- Draw the "cursor" at the mouse position.\n	love.graphics.draw(image, love.mouse.getX(), love.mouse.getY())\nend' },
		{ name: 'Moving stuff with the keyboard (014_keyboard_move.lua)',          src: 'x, y = 400, 300\n\nfunction love.load()\n	image = love.graphics.newImage("love.png")\nend\n\nfunction love.update(dt)\n	if love.keyboard.isDown("left") then\n	x = x - 100 * dt\n	end\n	if love.keyboard.isDown("right") then\n	x = x + 100 * dt\n	end\n	if love.keyboard.isDown("up") then\n	y = y - 100 * dt\n	end\n	if love.keyboard.isDown("down") then\n	y = y + 100 * dt\n	end\nend\n\nfunction love.draw()\n	love.graphics.draw(image, x, y)\nend' },
		{ name: 'Rotating images (015_image_rotation.lua)',                        src: 'angle = 0\n\nfunction love.load()\n	image = love.graphics.newImage("love.png")\nend\n\nfunction love.update(dt)\n	angle = (angle + dt) % (2 * math.pi)\n	x, y = 400 + math.cos(angle)*100, 300 + math.sin(angle)*100\nend\n\nfunction love.draw()\n	love.graphics.draw(image, x, y,angle)\nend' },
		{ name: 'Rotation and scaling (016_image_rot_scale.lua)',                  src: 'angle = 0\n\nfunction love.load()\n	image = love.graphics.newImage("love.png")\nend\n\nfunction love.update(dt)\n	angle = angle + dt\n	x, y = 400 + math.cos(angle)*100, 300 + math.sin(angle)*100\nend\n\nfunction love.draw()\n	local rot = angle*180/math.pi\n	local sx = math.cos(angle)*3\n	local sy = math.sin(angle)*2\n	love.graphics.draw(image, x, y, rot, sx, sy, 32, 32)\nend' },
		{ name: 'Using a truetype font (017_font_truetype.lua)',                   src: 'function love.load()\n	-- Create a new font with 32pt size and set it as default.\n	local f = love.graphics.newFont("font.ttf", 24)\n	love.graphics.setFont(f)\nend\n\ntext = [[\n   Lorem ipsum dolor sit amet, consectetur adipiscing elit,\nsed do eiusmod tempor incididunt ut labore et dolore magna\naliqua. Ut enim ad minim veniam, quis nostrud exercitation\nullamco laboris nisi  ut aliquip ex ea commodo  consequat.\nDuis aute irure dolor in  reprehenderit  in voluptate velit\nesse cillum dolore eu fugiat nulla pariatur. Excepteur sint\noccaecat cupidatat non proident, sunt  in culpa qui officia\ndeserunt mollit anim id est laborum.\n   Lorem ipsum dolor sit amet, consectetur adipiscing elit,\nsed do eiusmod tempor incididunt ut labore et dolore magna\naliqua. Ut enim ad minim veniam, quis nostrud exercitation\nullamco laboris nisi  ut aliquip ex ea commodo  consequat.\nDuis aute irure dolor in  reprehenderit  in voluptate velit\nesse cillum dolore eu fugiat nulla pariatur. Excepteur sint\noccaecat cupidatat non proident, sunt  in culpa qui officia\ndeserunt mollit anim id est laborum.\n]]\n\nfunction love.draw()\n	-- Print the text\n	love.graphics.print(text, 50, 50)\nend' },
		{ name: 'Firing objects towards mouse (018_physics_fire_at.lua)',          src: '--[[Description:\nUses basic physics formulas to determine each bullet position.\nAuto removes off-screen bullets.\n]]\n\nfunction love.load()\n	SPEED = 250\n	StartPos = {x=250, y=250, width=50, height=50}	--The starting point that the bullets are fired from, acts like the shooter.\n	bullets={}										--The table that contains all bullets.\nend\n\nfunction love.draw()\n	--Sets the color to red and draws the "bullets".\n	love.graphics.setColor(255/255, 0, 0)\n\n	--This loops the whole table to get every bullet. Consider v being the bullet.\n	for i,v in pairs(bullets) do\n		love.graphics.circle("fill", v.x, v.y, 4,4)\n	end\n\n	--Sets the color to white and draws the "player" and writes instructions.\n	love.graphics.setColor(255/255, 255/255, 255/255)\n\n	love.graphics.print("Left click to fire towards the mouse.", 50, 50)\n	love.graphics.rectangle("line", StartPos.x, StartPos.y, StartPos.width, StartPos.height)\nend\n\nfunction love.update(dt)\n\n	if love.mouse.isDown(1) then\n		--Sets the starting position of the bullet, this code makes the bullets start in the middle of the player.\n		local startX = StartPos.x + StartPos.width / 2\n		local startY = StartPos.y + StartPos.height / 2\n\n		local targetX, targetY = love.mouse.getPosition()\n\n		--Basic maths and physics, calculates the angle so the code can calculate deltaX and deltaY later.\n		local angle = math.atan2((targetY - startY), (targetX - startX))\n\n		--Creates a new bullet and appends it to the table we created earlier.\n		newbullet={x=startX,y=startY,angle=angle}\n		table.insert(bullets,newbullet)\n	end\n\n	for i,v in pairs(bullets) do\n		local Dx = SPEED * math.cos(v.angle)		--Physics: deltaX is the change in the x direction.\n		local Dy = SPEED * math.sin(v.angle)\n		v.x = v.x + (Dx * dt)\n		v.y = v.y + (Dy * dt)\n\n		--Cleanup code, removes bullets that exceeded the boundries:\n\n		if v.x > love.graphics.getWidth() or\n		   v.y > love.graphics.getHeight() or\n		   v.x < 0 or\n		   v.y < 0 then\n			table.remove(bullets,i)\n		end\n	end\nend' },
		{ name: 'Basic callbacks (051_callbacks_basic.lua)',                       src: 'function love.load()\n	love.graphics.setFont(love.graphics.newFont(11))\nend\n\nelapsed = 0\n\n-- Update: Called each frame. Update the\n-- state of your game here.\nfunction love.update(dt)\n	elapsed = elapsed + dt\nend\n\n-- Draw: Called each frame. The game\n-- should be drawn in this functions.\nfunction love.draw()\n	love.graphics.print("Elapsed time: " .. elapsed, 100, 100)\nend' },
		{ name: 'Mouse callbacks (052_callbacks_mouse.lua)',                       src: 'function love.load()\n	love.graphics.setFont(love.graphics.newFont(11))\nend\n\n-- Mousepressed: Called whenever a mouse button was pressed,\n-- passing the button and the x and y coordiante it was pressed at.\nfunction love.mousepressed(x, y, button, istouch)\n	-- Checks which button was pressed.\n	local buttonname = ""\n	if button == 1 then\n		buttonname = "left"\n	elseif button == 2 then\n		buttonname = "right"\n	elseif button == 3 then\n		buttonname = "middle"\n	else\n		-- Some mice can have more buttons\n		buttonname = "button" .. button\n	end\n\n	last = buttonname .. " pressed @ (" .. x .. "x" .. y .. ")"\nend\n\n-- Mousereleased: Called whenever a mouse button was released,\n-- passing the button and the x and y coordiante it was released at.\nfunction love.mousereleased(x, y, button, istouch)\n	-- Checks which button was pressed.\n	local buttonname = ""\n	if button == 1 then\n		buttonname = "left"\n	elseif button == 2 then\n		buttonname = "right"\n	elseif button == 3 then\n		buttonname = "middle"\n	else\n		-- Some mice can have more buttons\n		buttonname = "button" .. button\n	end\n\n	last = buttonname .. " released @ (" .. x .. "x" .. y .. ")"\nend\n\n\n-- Wheelmoved: Called whenever the mouse wheel moved,\n-- passing the x(horizontal) and y(vertical) wheel movement.\nfunction love.wheelmoved( x, y )\n	if y > 0 then\n		lastw = "wheel moved up"\n	elseif y < 0 then\n		lastw = "wheel moved down"\n	end\nend\n\n-- Load a font\nfunction love.load()\n	last = "none"\n	lastw = "none"\nend\n\n-- Output the last mouse button which was pressed/released.\nfunction love.draw()\n	love.graphics.print("Last mouse click: " .. last, 100, 75)\n	love.graphics.print("Last wheel move: " .. lastw, 100, 100)\nend' },
		{ name: 'Keyboard callbacks (053_callbacks_keyboard.lua)',                 src: 'function love.load()\n	love.graphics.setFont(love.graphics.newFont(11))\nend\n\n-- Keypressed: Called whenever a key was pressed.\nfunction love.keypressed(key)\n	-- I don\'t want to register spaces.\n	if key ~= "space" then\n		lastkey = key .. " pressed"\n	end\nend\n\n-- Keyreleased: Called whenever a key was released.\nfunction love.keyreleased(key)\n	-- I don\'t want to register spaces.\n	if key ~= "space" then\n		lastkey = key .. " released"\n	end\nend\n\n\n-- Load a font and set the text variable.\nfunction love.load()\n	lastkey = "nothing"\nend\n\n-- Output the last mouse button which was pressed/released.\nfunction love.draw()\n	love.graphics.print("Last key: " .. lastkey, 100, 100)\nend' },
		{ name: 'Mini Physics (100_physics_mini.lua)',                             src: 'function love.load()\n\n	love.graphics.setFont(love.graphics.newFont(11))\n\n	-- One meter is 32px in physics engine\n	love.physics.setMeter( 32 )\n\n	-- Create a world with standard gravity\n	world = love.physics.newWorld(0, 9.81*32, true)\n\n	-- Create the ground body at (0, 0) static\n	ground = love.physics.newBody(world, 0, 0, "static")\n\n	-- Create the ground shape at (400,500) with size (600,10).\n	ground_shape = love.physics.newRectangleShape( 400, 500, 600, 10)\n\n	-- Create fixture between body and shape\n	ground_fixture = love.physics.newFixture( ground, ground_shape)\n\n	-- Load the image of the ball.\n	ball = love.graphics.newImage("love.png")\n\n	-- Create a Body for the circle\n	body = love.physics.newBody(world, 400, 200, "dynamic")\n\n	-- Attatch a shape to the body.\n	circle_shape = love.physics.newCircleShape( 0,0,32)\n\n	-- Create fixture between body and shape\n	fixture = love.physics.newFixture( body, circle_shape)\n\n	-- Calculate the mass of the body based on attatched shapes.\n	-- This gives realistic simulations.\n	body:setMassData(circle_shape:computeMass( 1 ))\n\nend\n\nfunction love.update(dt)\n	-- Update the world.\n	world:update(dt)\nend\n\nfunction love.draw()\n	-- Draws the ground.\n	love.graphics.polygon("line", ground:getWorldPoints(ground_shape:getPoints()))\n\n	-- Draw the circle.\n	love.graphics.draw(ball,body:getX(), body:getY(), body:getAngle(),1,1,32,32)\n\n	-- Instructions\n	love.graphics.print("space: Apply a random impulse",5,5)\nend\n\nfunction love.keypressed(k)\n	if k == "space" then\n		-- Apply a random impulse\n		body:applyLinearImpulse(150-math.random(0, 300),-math.random(0, 1500))\n	end\nend' },
		{ name: 'Mini Physics Callbacks (101_physics_mini_callbacks.lua)',         src: 'text = "No collision yet."\n\nfunction love.load()\n\n	love.graphics.setFont(love.graphics.newFont(11))\n\n	-- One meter is 32px in physics engine\n	love.physics.setMeter( 32 )\n\n	-- Create a world with standard gravity\n	world = love.physics.newWorld(0, 9.81*32, true)\n\n	-- Create the ground body at (0, 0) static\n	ground = love.physics.newBody(world, 0, 0, "static")\n\n	-- Create the ground shape at (400,500) with size (600,10).\n	ground_shape = love.physics.newRectangleShape(400, 500, 600, 10)\n\n 	-- Create fixture between body and shape\n	ground_fixture = love.physics.newFixture( ground, ground_shape)\n	ground_fixture:setUserData("Ground") -- Set a string userdata\n\n	-- Load the image of the ball.\n	ball = love.graphics.newImage("love.png")\n\n	-- Create a Body for the circle.\n	body = love.physics.newBody(world, 400, 200, "dynamic")\n\n	-- Attatch a shape to the body.\n	circle_shape = love.physics.newCircleShape(0,0, 32)\n\n	-- Create fixture between body and shape\n	fixture = love.physics.newFixture( body, circle_shape)\n\n	fixture:setUserData("Ball") -- Set a string userdata\n\n	-- Calculate the mass of the body based on attatched shapes.\n	-- This gives realistic simulations.\n	body:setMassData(circle_shape:computeMass( 1 ))\n\n	-- Set the collision callback.\n	world:setCallbacks(beginContact,endContact)\n\nend\n\nfunction love.update(dt)\n	-- Update the world.\n	world:update(dt)\nend\n\nfunction love.draw()\n	-- Draws the ground.\n	love.graphics.polygon("line", ground_shape:getPoints())\n\n	-- Draw the circle.\n	love.graphics.draw(ball,body:getX(), body:getY(), body:getAngle(),1,1,32,32)\n\n	-- Instructions\n	love.graphics.print("space: Apply a random impulse",5,5)\n\n	-- Draw text.\n	love.graphics.print(text, 5, 25)\nend\n\nfunction love.keypressed(k)\n	if k == "space" then\n		-- Apply a random impulse\n		body:applyLinearImpulse(150-math.random(0, 300),-math.random(0, 1500))\n	end\nend\n\n-- This is called every time a collision begin.\nfunction beginContact(a, b, c)\n	local aa=a:getUserData()\n	local bb=b:getUserData()\n	text = "Collided: " .. aa .. " and " .. bb\nend\n\n-- This is called every time a collision end.\nfunction endContact(a, b, c)\n	local aa=a:getUserData()\n	local bb=b:getUserData()\n	text = "Collision ended: " .. aa .. " and " .. bb\nend' },
		{ name: 'Physics (102_physics_adv.lua)',                                   src: 'math.randomseed( os.time() )\n\nfunction love.load()\n\n   love.graphics.setFont(love.graphics.newFont(11))\n\n   love.physics.setMeter( 32 )\n   myWorld = love.physics.newWorld(0, 9.81*32, true)  -- updated Arguments for new variant of newWorld in 0.8.0\n   gravity="down"\n   myWorld:setCallbacks( beginContact, endContact, preSolve, postSolve )\n\n   myBallBody = love.physics.newBody( myWorld, 300, 400 ,"dynamic" )\n   myBallShape = love.physics.newCircleShape( 0, 0, 16 )\n   myBallFixture = love.physics.newFixture(myBallBody, myBallShape)\n   myBallBody:setMassData(0,0,1,0)\n   myBallFixture:setUserData("ball")\n\n   myWinBody = love.physics.newBody( myWorld, math.floor(math.random(100, 700)), math.floor(math.random(100, 500)) ,"dynamic" )\n   myWinShape = love.physics.newRectangleShape(  0, 0, 16, 16, 0 )\n   myWinFixture = love.physics.newFixture(myWinBody, myWinShape)\n   myWinFixture:setUserData("win")\n\n   myEdgeBody1 = love.physics.newBody( myWorld, 0,0 ,"static")\n   myEdgeShape1 = love.physics.newEdgeShape( 10,10, 790,10  )\n   myEdgeFixture1 = love.physics.newFixture(myEdgeBody1, myEdgeShape1)\n   myEdgeFixture1:setUserData("edge1")\n\n   myEdgeBody2 = love.physics.newBody( myWorld, 0,0 ,"static")\n   myEdgeShape2 = love.physics.newEdgeShape( 790,10, 790,590  )\n   myEdgeFixture2 = love.physics.newFixture(myEdgeBody2, myEdgeShape2)\n   myEdgeFixture2:setUserData("edge2")\n\n   myEdgeBody3 = love.physics.newBody( myWorld, 0,0 ,"static")\n   myEdgeShape3 = love.physics.newEdgeShape( 10,590, 790,590  )\n   myEdgeFixture3 = love.physics.newFixture(myEdgeBody3, myEdgeShape3)\n   myEdgeFixture3:setUserData("edge3")\n\n   myEdgeBody4 = love.physics.newBody( myWorld, 0,0 ,"static")\n   myEdgeShape4 = love.physics.newEdgeShape( 10,10, 10,590  )\n   myEdgeFixture4 = love.physics.newFixture(myEdgeBody4, myEdgeShape4)\n   myEdgeFixture4:setUserData("edge4")\n\n   texts = {}\n\n   prepostsolve = false\n\nend\n\nfunction love.update( dt )\n   myWorld:update( dt )\nend\n\nfunction love.draw()\n   love.graphics.line(myEdgeBody1:getWorldPoints(myEdgeShape1:getPoints()))\n   love.graphics.line(myEdgeBody2:getWorldPoints(myEdgeShape2:getPoints()))\n   love.graphics.line(myEdgeBody3:getWorldPoints(myEdgeShape3:getPoints()))\n   love.graphics.line(myEdgeBody4:getWorldPoints(myEdgeShape4:getPoints()))\n   love.graphics.circle("line", myBallBody:getX(), myBallBody:getY(), myBallShape:getRadius())\n   love.graphics.polygon("fill", myWinBody:getWorldPoints(myWinShape:getPoints()))\n   love.graphics.print( "gravity:"..gravity, 25, 25 )\n   if prepostsolve then\n	  love.graphics.print( "space : disable preSolve/postSolve Logging", 400, 25 )\n   else\n	  love.graphics.print( "space : enable preSolve/postSolve Logging", 400, 25 )\n   end\n   love.graphics.print( "arrows : change gravity direction", 400, 36 )\n   if #texts > 48 then\n	  table.remove(texts,1)\n   end\n   if #texts > 96 then\n	  table.remove(texts,1)\n   end\n   for i,v in ipairs(texts) do\n	 love.graphics.print( v, 25, 37+11*i )\n   end\nend\n\nfunction love.keypressed( key )\n   if key == "up" then\n	  myWorld:setGravity(0, -9.81*32)\n	  gravity="up"\n	  for i,v in ipairs(myWorld:getBodyList( )) do\n		v:setAwake( true )\n	  end\n   elseif key == "down" then\n	  myWorld:setGravity(0, 9.81*32)\n	  gravity="down"\n	  for i,v in ipairs(myWorld:getBodyList( )) do\n		v:setAwake( true )\n	  end\n   elseif key == "left" then\n	  myWorld:setGravity(-9.81*32, 0)\n	  gravity="left"\n	  for i,v in ipairs(myWorld:getBodyList( )) do\n		v:setAwake( true )\n	  end\n  elseif key == "right" then\n	  myWorld:setGravity(9.81*32, 0)\n	  gravity="right"\n	  for i,v in ipairs(myWorld:getBodyList( )) do\n		v:setAwake( true )\n	  end\n   end\n\n   if key == "space" then\n	  prepostsolve = not prepostsolve\n   end\n\n   if key == "r" then\n	  love.load()\n   end\nend\n\nfunction beginContact( a, b, c )\n   coll( a, b, c, "beginContact",true )\nend\n\nfunction endContact( a, b, c )\n   coll( a, b, c, "endContact",true )\nend\n\nfunction preSolve( a, b, c )\n   if prepostsolve then\n	 coll( a, b, c, "preSolve",false )\n   end\nend\n\nfunction postSolve( a, b, c )\n   if prepostsolve then\n	 coll( a, b, c, "postSolve",false )\n   end\nend\n\nlocal function ifnil(ptest,preturn)\n   if p==nil then\n	  return preturn\n   end\n   return ptest\nend\n\nfunction coll( a, b, c, ctype,detail )\n\n   local f, r = c:getFriction(), c:getRestitution()\n   --local s = c:getSeparation()\n   local px1, py1, px2, py2 = c:getPositions()\n   --local vx, vy = c:getVelocity()\n   local nx, ny = c:getNormal()\n   local aa = a:getUserData()\n   local bb = b:getUserData()\n\n   table.insert(texts, ctype .. " Collision : " .. aa .. " and " .. bb)\n   if detail then\n	 table.insert(texts, "Position: " .. ifnil(px1,"nil") .. "," .. ifnil(py1,"nil") .. "," .. ifnil(px2,"nil") .. "," .. ifnil(py2,"nil") )\n	 --table.insert(texts, "Velocity: " .. vx .. "," .. vy )\n	 table.insert(texts, "Normal: " .. nx .. "," .. ny )\n	 table.insert(texts, "Friction: " .. f )\n	 table.insert(texts, "Restitution: " .. r )\n	 --table.insert(texts, "Separation: " .. s )\n   end\n   table.insert(texts, "")\nend' },
		{ name: 'Line Iterators (103_filesystem_lines.lua)',                       src: 'function love.load()\n\n	-- Set the font.\n	love.graphics.setFont(love.graphics.newFont(11))\n\n	-- Store the lines in this table.\n	lines = {}\n\n	--get height of the current font and reduce by 3\n	fontheight = love.graphics.getFont():getHeight() - 3\n\n	-- Open the file main.lua and loop through the first\n	-- 50 lines.\n	for line in love.filesystem.lines("main.lua") do\n		table.insert(lines, line)\n		if #lines >= 50 then break end\n	end\n\nend\n\nfunction love.draw()\n	-- Draw the loaded lines.\n	for i = 1,#lines do\n		love.graphics.print({{.67,.02*i,.78}, string.format("%03i: ", i) , {1,.02*i,.68}, lines[i]}, 50, 50+(i*fontheight))\n	end\nend' },
		{ name: 'Display modes (104_display_modes.lua)',                           src: '--[[Description:\nAuthor: surtic\nDisplays supported fullscreen modes\n]]\nfunction love.load()\n\n	love.graphics.setFont(love.graphics.newFont(11))\n\n	-- Get the display modes.\n   modes = love.window.getFullscreenModes()\n\n	-- The table looks like this:\n	-- modes = {\n	--	  { width = 800, height = 600 },\n	--	  { width = 1024, height = 768 },\n	-- }\n\nend\n\nfunction love.draw()\n	love.graphics.print("Supported modes: ", 50, 50)\n   for i, mode in ipairs(modes) do\n	  local desc = string.format("mode %d: %dx%d", i, mode.width, mode.height)\n	  love.graphics.print(desc, 50, 50 + i * 20)\n   end\nend' },
		{ name: 'Shaders (150_shaders.lua)',                                       src: '--[[Description:\nAuthor: janwerder\nDraw a desaturation shader with an image on a canvas\nMove your mouse up and down to set the strength of the shader\n]]\nfunction love.load()\n	--load a sample image\n	image = love.graphics.newImage("love.png")\n\n	-- Create a new canvas to draw the shader and the content on with the size of our window\n	local sw, sh = love.graphics.getWidth(), love.graphics.getHeight()\n	canvas = love.graphics.newCanvas(sw, sh)\n\n	--Declare our shader\n	shader = love.graphics.newShader([[\n		extern vec4 tint;\n		extern number strength;\n		vec4 effect(vec4 color, Image texture, vec2 tc, vec2 _)\n		{\n			color = Texel(texture, tc);\n			number luma = dot(vec3(0.299, 0.587, 0.114), color.rgb);\n			return mix(color, tint * luma, strength);\n		}\n	]])\n\n	--Send an initial value for tint to the shader in the form of a table\n	shader:send(\'tint\', {1.0,1.0,1.0,1.0})\nend\n\nfunction love.update()\n	--Update the strength of the shader with the height of the mouse y position\n	local x,y = love.mouse.getPosition()\n	--"strength" is a variable in the shader itself, that\'s why we can update it here\n	shader:send(\'strength\', y/love.graphics.getHeight())\nend\n\nfunction love.draw()\n	--Draw the image to canvas\n	love.graphics.setCanvas(canvas)\n		love.graphics.draw(image, 400, 300)\n	love.graphics.setCanvas()\n\n	--Now set the shader of the canvas to our shader and draw the canvas afterwars\n	love.graphics.setShader(shader)\n		love.graphics.draw(canvas,0,0)\n	love.graphics.setShader()\nend' },
	][i-1];
};
example.options.add(document.createElement("option"));
example.options[0].text = ' --- Selecting an entry will load the code of the example ---'
for (var i = 1, e = GetExample(i); e; e = GetExample(++i))
{
	example.options.add(document.createElement("option"));
	example.options[i].text = e.name;
	example.options[i].value = i
}
example.onchange = function()
{
	if (example.value==='') return;
	code.value = GetExample(example.value).src;
};
code.AddSampleAssetFiles = function(FS)
{
	if (code.value.indexOf('anim.png') > 0) FS.createDataFile('/anim.png',0,FS.DEC('iVBORw0KGgoAAAANSUhEUgAAAGAAAABABAMAAAAXGm89AAAAHlBMVEUAAAB9MDHroKHml5jupqfvrK3jmJnztbb1urvjjo/R1mqgAAAAAXRSTlMAQObYZgAAAPdJREFUeF7tlTFug0AQRfEN9o8WcMqZIPcmJ7AFB1gpI9eIE1BEuHWFT5DzRkrDQBHYLlH2d694u9Lsan72t5MCuDju384ugg+ftch5P2cvfdU0r243Z0Xdql7dbj70VT4O77zFRuBwLz1vsBVwe5SLE/GcYPn2nOwNnZTEVmA5PgRGCMcpwAr5WiiHhUD8QWymhDbki6lAFZaJlXj1Dif3A7Nv2K1estvi6L8U/Vt/Z1JSUj+kfrD7f4MjBFTfhWME6DiYiuq8jjCCeCU2QgbJlcw6J26DkJsFaomvzgq+WQrVRYqZ0VcXf7L9gFoYhota8L/7IeULhYRwrJc7NvsAAAAASUVORK5CYII='),!0,!0,!0);
	if (code.value.indexOf('love.png') > 0) FS.createDataFile('/love.png',0,FS.DEC('iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAO1ElEQVR4Xu2aCZBV1ZnHf9+5976td5pmaXQAcQZi1NFy3EZGnTHjKK2QICYSl0QNNK4jzhBq3MrExIkaHQ0KNggCskk5TkBZxARN1KmoccYxLtHSiEGh2wIVoaGXd8830nVvnbpzX3fTKJDU5F91+M45r+pV///n2zjv8P8cf4KwD6EoghDjg9PvrxLfHAYMEbQ/4AMARYEWRTer8V+rf/w72/9oBdBjmpCXGgFoPuP+o9STCSinAichPWmv0Z6CAvBL4OeiPDJoTePrOEH/MAXYdEYT9WsbPyPddIga/hGYgiED4vgKiCMJBlDHHQRFwSaFwbID4T4vNHcNWDvpw01nN1H/WOMfhgCbz7yfwWumsGlM00kCtyHiTtqAQMzcya09SK8JmxREFZR1WK4ZvLbxjQ/H3MeA1VccWAGaG2YPU9X5CKcgAkKXAQETyyyONb2SdwpptGFj/goaC8FjNtQLhzwxZdv+E8CRZtCqyWxuaPoecFOCeDRPCSARKcHZFHnF2YQAbq6KKk4Iy1WD1zTeu6lhDvWrJu17Ad657G4K7+XKQV5BZDgmSby01cgKoE4UBxzBOEcoJIgmRdJoL1o/326D0RK2FYeuu3zfCtDc0HS0wouIeAiIiYgYF+du7mwpL3AoffppEZJCYF1YYHUHYo8YvOqyDftMgM1jmk5G+AUiYEAcQTAxcUkIkPQOlw9Kh0BM3ImgjnxkSVoFdWsGtYej5GeXv/mFC7CpoWm0wDMp8jFpz61jz0CSe0CvOcDFfkwqccrxwAnhRMiEyr8NqmV74J9wz6hxz3NN7/R8esG2hnm02eJIiybJG0cOz528GOI5GNKhQBwKaaAmKYJRsCAqYBUVwI1EeQxCWFRXzbOV5QSh/dW0Vx49xE56ZMOdcyboXgvQPKaJ1vadGckGL5ck78VEY/LdhQJgTEQ8smlExC0u7iOx4tRhAQGVaD8SwoTwy8oyVtRU4anSYQwvl+ffWPf8f1fmLl7a8cMHJ+6dAINWN+6O++cQyfVKPvYCD0ferRExqCgiPQrgSpwFsBAKqCOLCiKK4vBWNkNT/34EqoQAQKvnZRuOO+qZ1TMajt9bD9hd568A+SvExXyCvBefenI4ceIkaJz39CKAxOQ9wAoqCmohjIS1mkglWzyP2/v3J4PSkei3lJaMf9xFjSuuWNg07r4+CfBew0x8CapQey8mTmikiEqSsJuLwYWDAS8ulfQqgCMPGItYIPRQsRAmq0e7CLf2648HFGNNxRlP4Z189t43zp4zf+awIa0zZozZMwGGrrp8t+vPiU/QdXNJsmnyJgoHt06USEDEoCY+RXEFAEWsoDF5UdBILFEkNCgKYgEQgVsrauiUKGyEkthpDNcOG7JgzYwxE0gDQxJsPGsWm8+YMwLhXCSR0ZPZPiWEAU8QP5r7xgnkGWT3CLyufYkGvtc1xJeuz9ltu9YGAgN+NKLvk+i7AiPcU1HNNuPFLTgaT9JgU+CdM2/ikqGXXDK3dwEOfvwy8OwdrolJdHfO9aUEec84lzeCDS3ekCqyRx9EcEQ9UlvAWgteTF6i0SVM12dmYAWZI+vJHjmka247Q/CckBkjLCyr4Pe+D4KDAGhKBAFCERbWVd05b96lvYfAB2Purwa+lmxhSdZ5A3iuB0i6vWANlJ1+GGV/OxLxkhqHn+5i28qXKb67FRMYAGxHSObweirPPAKTz+AAtqNI65Ov07r+t2Q8w1o/z8smwKiAOsIosSuUFOYTzz9Hj78rJ89f29ajBxjk6vTpJ9vbZPdnIvIGNWD+rIa6W75K+Ve+lCIP4FXm6XfBiRRO/xKhVaxVKiccQ/X4Y1LkAUzGp6LhSOpuHssrA6t40svgxQxN+rS1m41dRvjKcSOnpvmmcWXyCkfcNBZC0pVARQmOPpjaq0/DZH16Q/nxI8iOHkHZmMPJHVZPb/Aqcpw67e85fEQNirrLFnEjCXEGwQBW5JqeBNh9qzMMoQ4D8UiGgoAhJYIawRs1kJoLTqAvqD55FGVHDaUvmDrpeA4aXJbkiSSFQCiFjZlgwGPfmFfXrQDSlfkFwSF52eEGnrM261E7+RT2F2648iTCsJj0c5Veb5yswNzaAef/5FvLug2Bv3OKSvoyw8R7rr0NQ0vVhSewPxH4hm+P/zKhDZP3Dig9wSi0BP7oqxec140AyqlOQU2STyRFg0TtrVZlybsY3m847cRhQIiqpkOf7nOCCGeWDIGtZz8QIOSSceS8wH2xW1uU/LHDOFA48S8HoWgPYS+pG9ePPK9QUoDOYvhlAEFSNdQJEW8aELChxR/enwOFkcP7YcOiK3dCr9hphPnnLRqREsCKHOzu5nBkU0Ko8wBrMdUFDhT6VWYphiGKg1tISUFUhN+U5UamBDCqtalOKnGLk1bYYtEw5EAhtCGUygFCj+jAG5ASQA3lKGDYcxhDx9YdHCi0bNmBMUJfscWXXEoAFBvZPYbxDJ++3cKBwmtvNWNE6CuyiE0JIEhHnwUQYcuL73Cg8Kv/2Qhi+i6Ahp0lPMA2g6YrhyqgEBkHAQzeriJbXv89+xtPPvMGnp/FGA/BAe3tEJVyS0u6ChjZ5IjFZNXNXcsZDRARctk8by//T/Y3Fvz7iwSZHCLSTenXkkKIwrHbt7+R7gMy8iqAok5BTf5W5+YWVYuoEoiBLTt579nX2F9YtuIFdnUaPM8nUbl0T9xfOe/hb72bEmDof0zuQGnDJnyph9/qAAueGMqyBX67+Bnat+9kX2Nzyycs/ulLZLIFjAkQBKU78ppyjYGdxR093Qc87ZSUBPGkJyhYUMAoZExAdb6Cp36wjH2JYjFk2veWU1FZg+9nEZE0cXW21AdFkXXdCiDIEygAyRN3pN0eFrUKCh5C3suQa/dYd+u+E2HqDYsRkycIChjjk/pbXf4qCStQ31H8xS2XrCgtQFH0EVRRNJVV1bk9WIUQ1CpYjXKBR3lQQJtbWXvbcr5oTLtxEdu2W4JcBb6fQUq9t9He/zv8ow8+XHjjvHGlBThoVeP7wLtYiEbCCzSeuzUaxiJA1gRUZsvp/GAHK3+4hC8CnZ1Fpk6fz5atnWTzVQReFnFxCjZ55D0kBIZ0FJv/YsUln/R2JziLGJr+GRqrboQKauM5YpWsyVCVLUc/bGfp9Lm072xjb7F166dcNXUOra2Qz1UR+BkX9xZUtYfarwlBLFBRLN7x7ZvepUcBMtu23okmv9w9TlA0sriBhm5uFHJehspsBfl2nwWfEXj/zb43Si/9+i3++Z8exKNALldJJshhxHOnT5q0uj4uFR0Fqzw2c/nd878/vGcBap+9zqI6O9EFWhf7TgxSYkhoEasY2xUOlGfKqS3UsPK2n7J+8Xr2FPNmr2bWjLVUVdaSj8iLmKgFca9GItalK4G6OQh1xeIC4SHb67X4u6c+iBTDa5OvsQBHFrXpUNAwqgqhhS4RlIz4VGbKGFhdx++ee5s5353L1uaP6A4bNzQz/apZ/Oa/3qe2po5CrpLAzyIYRBVRUv1I+n2RkvJqVW74oPnam1F6FWD40xczaN3lrSg/QkFTXkAkgot9NLJWsaFCNIxVfAwFP09NvhqvzeOB6Qt4ctnTJAHLH1zHbTcswWieikIN+Ww5nvERFSe6I+6EiIx00/pa4OD2zgdOfvTSj25G9vx9wODVjf+yuaFpClaqATDqyqAAItE8ImyA0PUIigEVBPAQcl4WxcNUB7z21Jv8+ulXmXBFAztb21g25wmMyVJXMxA/WwaeR4iHtQCarnAqpRsfIYWqMLQr7jtrUp8fSHxy3HJ28fE/oPq8KvFJAIDEB6GoKIhNP/xVizWKYgAwxpAxPmV+AckHeJ27WH7XKjqBinwVflDABDms8QkBqwoIahVBXDeqxGwjo65zTX6EBQ7taB/njV/I+kcv6psA1S98HeCFzWNm347yXVX3hxACiDv9dObBQVERUAsieGK6qoQaj4yfoxNQ46OeT1EMqgJqo/yTLmfu9FPEHRRUhEPb2pfNnfXVx/f6iYyiyGqZvnlM01+DjFajiJXI3S0Sn7okExBEHqFExAFj3AEaCPBQz8NAF/GiChKfqFUScKfuRJBElk9FRE1n8XfLZo6dSC8w9ABB2HzGrN354G9Q3ZgofeoSIRY0TCTGeERrorUFa6N9MF1DkPizELA20YWmyy6lqwAgkS1Yu2PZho2H33Lx8s//TnDw2svY1HA/sqPjEC3PbMDKEDUKVgBcGHiABSCKfUWMAgYktgJoJLu6NfGJWrAm+W6YONQVRdIPq2PqKCDkrW29sGXbsNsHDmj7wdzxn18AgPpVU/gsFxQ7282IIBu+ipVD1bh7AqyLU3cSimpMMA4FA46zIy44MhLXNUG7LGi3N1RJ5G348cSW7Ye+XJH7+Na54xVgr0MgXRYnkwm0ffCqxj/H6noU1NVnkq7+f9tkoubJuv2uPdc8uX1FE+23q/uxdTk3NlBVDF999K31da+XBx858l+gAACD1kzi/TPn7M4Jp6nVaViIhcACuHglVBxhGwuDhrg9C0SEY/Li4t4RtvE8GRbxZGhb+z2LZ559xI8HjA5vnjeBvsDQRxy0ZhIAQ1Y1/tiGxVFq7QasE4HQtcnx3ImBEyWMycUDN9w6Ee9OEFCgENpPj2htO/Yns792DcC0h8bTVxg+DwLvzRErJw1Xy1TQEKtY1eimyLXIyaxOgnzCWzQSJyaqNvEkPk51GbUMbO+8ae6ssVUe9iU+B3w+B4avnAzAyJWX3q0PP37PK0s/vFHgeoxmNH7malztxoKIAlEVEdwbBJV0YktWf4JQKdjwX2+fM/46AQCun3euHgAB0pBvnKXA93ePF8+Z/02xeqUYOVFtzF3BKFYFNYJq3D0LxPyxWIwrbdG/hVCf62fD2dfNO3chwB18cfDZB2j5uGzJWevPXcJ3rpeffTpqglHGejA6RIYROwQae7er4xg8lED1nXaRn9d2hk9dsXDTcmGqnX3Rw/xR4tlzk93Y019fVP/YxMWnPDpxybhl31wycekFi8976Pyl45ZdsPikNWMf6IcDi85fxL7Fn/An/C9OpM0OI1QHaQAAAABJRU5ErkJggg=='),!0,!0,!0);
	if (code.value.indexOf('font.ttf') > 0) FS.createDataFile('/font.ttf',0,FS.DEC('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'),!0,!0,!0);
};

})();
